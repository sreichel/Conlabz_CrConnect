<?php
/**
 * Conlabz GmbH
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com and you will be sent a copy immediately.
 *
 * @category   CleverReach
 * @package    Conlabz_CrConnect
 * @copyright  Copyright (c) 2012 Conlabz GmbH (http://www.conlabz.de)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
namespace Conlabz\CrConnect\Model\Checkout;

class Observer
{

    /**
     * @var \Magento\Framework\App\Config\ScopeConfigInterface
     */
    protected $scopeConfig;

    /**
     * @var \Magento\Checkout\Model\Session
     */
    protected $checkoutSession;

    /**
     * @var \Psr\Log\LoggerInterface
     */
    protected $logger;

    /**
     * @var \Magento\Sales\Model\OrderFactory
     */
    protected $salesOrderFactory;

    /**
     * @var \Magento\Customer\Model\CustomerFactory
     */
    protected $customerCustomerFactory;

    /**
     * @var \Magento\Newsletter\Model\SubscriberFactory
     */
    protected $newsletterSubscriberFactory;

    /**
     * @var \Conlabz\CrConnect\Helper\Data
     */
    protected $crConnectHelper;

    /**
     * @var \Magento\Framework\Stdlib\Cookie\CookieMetadata
     */
    protected $cookieCookieMetadata;

    public function __construct(
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \Magento\Checkout\Model\Session $checkoutSession,
        \Psr\Log\LoggerInterface $logger,
        \Magento\Sales\Model\OrderFactory $salesOrderFactory,
        \Magento\Customer\Model\CustomerFactory $customerCustomerFactory,
        \Magento\Newsletter\Model\SubscriberFactory $newsletterSubscriberFactory,
        \Conlabz\CrConnect\Helper\Data $crConnectHelper,
        \Magento\Framework\Stdlib\Cookie\CookieMetadata $cookieCookieMetadata
    ) {
        $this->scopeConfig = $scopeConfig;
        $this->checkoutSession = $checkoutSession;
        $this->logger = $logger;
        $this->salesOrderFactory = $salesOrderFactory;
        $this->customerCustomerFactory = $customerCustomerFactory;
        $this->newsletterSubscriberFactory = $newsletterSubscriberFactory;
        $this->crConnectHelper = $crConnectHelper;
        $this->cookieCookieMetadata = $cookieCookieMetadata;
    }
    public function success_action()
    {
        $email = false;
        $apiKey = trim($this->scopeConfig->getValue('crroot/crconnect/api_key', \Magento\Store\Model\ScopeInterface::SCOPE_STORE));
        $listID = trim($this->scopeConfig->getValue('crroot/crconnect/list_id', \Magento\Store\Model\ScopeInterface::SCOPE_STORE));

        $syncOrders = trim($this->scopeConfig->getValue('crroot/crconnect/sync_orders', \Magento\Store\Model\ScopeInterface::SCOPE_STORE));
        $syncOrderStatus = trim($this->scopeConfig->getValue('crroot/crconnect/sync_order_status', \Magento\Store\Model\ScopeInterface::SCOPE_STORE));

        if ($syncOrders) {
            $lastOrderId = $this->checkoutSession->getLastOrderId();
        } else {
            $lastOrderId = false;
            $this->logger->debug("CleverReach_CrConnect: order sycing deactivated");
        }
        if ($lastOrderId) {
                $order = $this->salesOrderFactory->create()->load($lastOrderId);
                $customer = $this->customerCustomerFactory->create()->load($order->getCustomerId());

                $subscribed = $customer->getIsSubscribed();

            if ($subscribed === null) {
                $subscribed = $this->newsletterSubscriberFactory->create()->loadByCustomer($customer)->isSubscribed();
            }

            if ($subscribed) {
                $add = array("newsletter" => "1");
            } else {
                $add = array("newsletter" => "0");
            }

                $email = $order->getCustomerEmail();

            if ($email) {
                if ($customer->getEmail()) {
                    $crReceiver = $this->crConnectHelper->prepareUserdata($customer, $add, false);
                } else {
                    $shippingAddress = $order->getBillingAddress()->getData();
                    if ($shippingAddress) {
                        $crReceiver = array (
                          'email' => $email,
                          //'registered' => strtotime($shippingAddress["created_at"]),
                          //'activated' => strtotime($shippingAddress["updated_at"]),
                          'source' => 'MAGENTO',
                          'attributes' => array(0 => array("key" => "firstname", "value" => @$shippingAddress["firstname"]),
                                                1 => array("key" => "lastname", "value" => @$shippingAddress["lastname"]),
                                                2 => array("key" => "street", "value" => @$shippingAddress["street"]),
                                                3 => array("key" => "zip", "value" => @$shippingAddress["postcode"]),
                                                4 => array("key" => "city", "value" => @$shippingAddress["city"]),
                                                5 => array("key" => "country", "value" => @$shippingAddress["country_id"]),
                                                6 => array("key" => "salutation", "value" => @$shippingAddress["prefix"]),
                                                7 => array("key" => "title", "value" => @$shippingAddress["suffix"]),
                                                8 => array("key" => "company", "value" => @$shippingAddress["company"]))
                        );

                        $cookie = $this->cookieCookieMetadata;
                        if ($cookie->get('crmailing')) {
                            $crReceiver['orders'][0]['mailings_id'] = $cookie->get('crmailing');
                        }

                        if ($subscribed) {
                            $crReceiver["attributes"][] = array("key" => 'newsletter', "value" => "1");
                        }
                    }
                }
            }

        }

        if ($apiKey && $listID && $email && $lastOrderId && $syncOrders) {
            try {
                $client = new \SoapClient($this->crConnectHelper->getWsdl(), array("trace" => true));
            } catch (Exception $e) {
                $this->logger->debug("CleverReach_CrConnect: Error connecting to CleverReach server: ".$e->getMessage());
            }

            /* ########################### */
            if ($crReceiver) {
                try {
                    $tmp = $crReceiver;
                    $addTxt="keeping status";
                    //if new users should be activated by default. do it
                    if ($syncOrderStatus) {
                        $tmp["deactivated"] = 0;
                        $addTxt = "forced active";
                    }

                    // Get keys for different user groups
                    if ($this->scopeConfig->getValue('crroot/crconnect/showgroup', \Magento\Store\Model\ScopeInterface::SCOPE_STORE) == '1') {
                        $groupKeys = $this->crConnectHelper->getKeys();
                        if ($groupId = $customer->getGroupId()) {
                            if (isset($groupKeys[$groupId])) {
                                $return = $client->receiverAdd($apiKey, $groupKeys[$groupId], $tmp);
                            }
                        }
                    } else {
                        $return = $client->receiverAdd($apiKey, $listID, $tmp);
                    }

                    if ($return->status=="SUCCESS") {
                        $this->logger->debug("CleverReach_CrConnect: subscribed ($addTxt) - ".$crReceiver["email"]);
                    } else {
                        if ($return->statuscode=="50") { //seems to exists allready, try update
                            $return = $client->receiverUpdate($apiKey, $listID, $tmp);
                            if (!$return->status=="SUCCESS") {
                                $this->logger->debug("CleverReach_CrConnect: order insert error - ".$return->message);
                            } else {
                                $this->logger->debug("CleverReach_CrConnect: resubscribed ($addTxt) - ".$crReceiver["email"]);
                            }
                        } else {
                            $this->logger->debug("CleverReach_CrConnect: error - ".$return->message);
                        }
                    }
                } catch (Exception $e) {
                    $this->logger->debug("CleverReach_CrConnect: Error in SOAP call: ".$e->getMessage());
                }
            }

            /* ########################### */

            $items = $order->getAllItems();
            if ($items) {
                foreach ($items as $item) {
                    $tmpItem = array();
                    $tmpItem["order_id"] = $lastOrderId;
                    $tmpItem["product"] = $item->getName();
                    $tmpItem["product_id"] = $item->getProductId();
                    $tmpItem["price"] = round($item->getPrice(), 2);
                    $tmpItem["quantity"] = (integer)$item->getQtyOrdered();
                    $tmpItem["purchase_date"] = time();
                    $tmpItem["currency"] = $order->getData('order_currency_code');
                    $tmpItem["source"] = "MAGENTO Order";

                    $cookie = $this->cookieCookieMetadata;
                    if ($cookie->get('crmailing')) {
                        $tmpItem['mailings_id'] = $cookie->get('crmailing');
                    }

                    $tmp = $client->receiverAddOrder($apiKey, $listID, $email, $tmpItem);
                    if ($tmp->status!="SUCCESS") {
                        $this->logger->debug("CleverReach_CrConnect: Error - ".$tmp->message);
                    } else {
                        $this->logger->debug("CleverReach_CrConnect: submitted: ".$tmpItem["order_id"]." - ".$tmpItem["product"]);
                    }
                }
            }
        }
    }
}
